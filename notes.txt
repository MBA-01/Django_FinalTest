create a new App inside the global folder.


as chagpt explained, these apps are used for different purposes.

as they are totally autonomous apps working for a certain purpose and have a goal to achieve 


Models (Blueprints): Think of models as blueprints for the different parts of your castle. 
For example, you might have blueprints for towers, walls, and rooms. 
In Django, you create models to describe the different things you want in your web app, like users, posts, or comments.

Views (Windows): Views are like windows in your castle. 
They show people different parts of your castle when they look through them. 
In Django, views are like the different pages or sections of your web app that people can see.

Templates (Decorations): Templates are like decorations inside your castle. 
They make things look nice and organized. 
In Django, templates are used to make your web app pages look good by adding colors, images, and arranging things neatly.

URLs (Signposts): Imagine you have signposts outside your castle that tell visitors where to go. 
In Django, URLs are like signposts that help direct people to the right views (windows) in your web app.

Forms (Magic Scrolls): Sometimes you want your visitors to leave a message or input some information. 
Forms are like magic scrolls that help your visitors send messages to your castle. 
In Django, forms help you collect and process information from users.

Admin (Magic Wand): Django also gives you a magic wand called the admin panel. 
With this, you can easily manage and organize everything in your castle without having to do a lot of coding.




________________________________________________________________________________

1. create an app (test1)
2. add view to views (test1)
3. add urls.py to (test1)

after seeing how we make urls to views. 

we did execute "python manage.py migrate"

and we started making models, Todolist and item models 
(models are more like database for django)

now we'll execute "python manage.py makemigrations main"

everything worked well but we encountered a problem

needed to fix a bug with "python manage.py migrate --run-syncdb" for the error of "django.db.utils.OperationalError: no such table: test1_todolist"

now we have the models existing, we created an Todolist with the shell "python manage.py shell"

then we executed 

"""
from test1.models import Item,ToDoList
t = ToDoList(name="Mohamed\'s Todolist")
t.save()
"""


this is how to create a new object.

we can get all objects by : "ToDoList.objects.all()"

we can get object by id : " ToDoList.objects.get(id=1)"

we create an item differently than the ToDoList object : "t.Item_set.create(text="random text",complete=False)"


now we'll display the ToDoList and Items.

we managed to give an int as a request to the server 

we went to urls and gave it "<int:id>" instead of " " 

and added id as a parameter to index() and displayed it as :

def index(response,id):
    return HttpResponse("<h1>%s</h1>" % id)

